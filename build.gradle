plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = 'com.sajal'
version = '1.0.0'
description = 'A lightweight, high-performance asynchronous pipeline library for Java, designed specifically to leverage virtual threads'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // For virtual threads
    }
}

application {
    mainClass = 'com.sajal.VtPipe.examples.PipeExample'
}

// Ensure javadoc and sources jars are generated
java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
}

test {
    useJUnitPlatform {
        // Exclude performance tests by default
        excludeTags 'performance'
    }
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    // Enable parallel test execution
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    
    // Enable test ForkedJVM options for virtual threads
    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors()
    
    // Create a separate task for performance tests
    task performanceTest(type: Test) {
        useJUnitPlatform {
            includeTags 'performance'
        }
        
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}